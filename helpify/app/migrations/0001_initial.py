# Generated by Django 3.1.3 on 2020-11-21 21:00

import cuser.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='uploads/%Y/%m/%d')),
                ('reg_plate', models.CharField(max_length=10, validators=[django.core.validators.MinLengthValidator(10, message='Enter valid license plate number'), django.core.validators.RegexValidator('^[A-Z]{2}[0-9]{2}[A-Z]{2,3}[0-9]{4}$', message='Enter valid license plate number')])),
                ('ip', models.CharField(blank=True, max_length=20)),
                ('latitude', models.DecimalField(decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(decimal_places=8, max_digits=11, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='HUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email address already exists.'}, max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('reg_plate1', models.CharField(max_length=10, validators=[django.core.validators.MinLengthValidator(10, message='Enter valid license plate number'), django.core.validators.RegexValidator('^[A-Z]{2}[0-9]{2}[A-Z]{2,3}[0-9]{4}$', message='Enter valid license plate number')])),
                ('reg_plate2', models.CharField(blank=True, max_length=10, validators=[django.core.validators.MinLengthValidator(10, message='Enter valid license plate number'), django.core.validators.RegexValidator('^[A-Z]{2}[0-9]{2}[A-Z]{2,3}[0-9]{4}$', message='Enter valid license plate number')])),
                ('contact_phone1', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('contact_phone2', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('contact_phone3', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', cuser.models.CUserManager()),
            ],
        ),
    ]
